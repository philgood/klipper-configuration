[gcode_macro _PRINT_VARIABLES]
variable_bed_mesh: 1
variable_bed_temp: 0.0
variable_chamber_temp: 0.0
variable_cooldown: 1
variable_extruder_temp: 0.0
variable_filament_type: "NO-FILAMENT"
variable_nozzle_size: 0.0
variable_purge_speed: 15.0
gcode:
  {% set reset = params.RESET | default(0) | int %}
  {% if reset %}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=bed_mesh VALUE=1
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=bed_temp VALUE=0.0
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=chamber_temp VALUE=0.0
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=cooldown VALUE=1
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=extruder_temp VALUE=0.0
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=filament_type VALUE='"NO-FILAMENT"'
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=nozzle_size VALUE=0.0
    SET_IDLE_TIMEOUT TIMEOUT={ printer.configfile.settings.idle_timeout.timeout | float }
  {% endif %}

[gcode_macro PRINT_START]
description: Print start macro to be used by your slicer of choice
gcode:
  {% set BED_MESH = params.BED_MESH | default(1) | int %}
  {% set BED_TEMP = params.BED_TEMP | default(100) | float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP | default(50) | float %}
  {% set COOLDOWN = params.COOLDOWN | default(1) | int %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(240) | float %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE | default("NO-FILAMENT") | string %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE | default(0.40) | float %}
  {% set PURGE_LINE = params.PURGE_LINE | default(1) | int %}
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=bed_mesh VALUE='{BED_MESH}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=bed_temp VALUE='{BED_TEMP}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=chamber_temp VALUE='{CHAMBER_TEMP}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=cooldown VALUE='{COOLDOWN}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=extruder_temp VALUE='{EXTRUDER_TEMP}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=filament_type VALUE='"{FILAMENT_TYPE}"'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=nozzle_size VALUE='{NOZZLE_SIZE}'
  _CHECK_USER_VARIABLES
  _PRINT_START_HEAT_BED
  _PRINT_START_PREPARE
  _PRINT_START_HEAT_HOTEND
  {% if PURGE_LINE == 1 %}
  _PRINT_START_PURGE_LINE
  {% endif %}
  _FILAMENT_PRESSURE_ADVANCE
  RESPOND MSG="Printing [{FILAMENT_TYPE}]"
  #HOUR_COUNTER_START

[gcode_macro PRINT_END]
description: Print end macro to be used by your slicer of choice
gcode:
  {% set purge_speed = printer['gcode_macro _PRINT_VARIABLES'].purge_speed | default(1.0) | float %}
  SAVE_GCODE_STATE NAME=END_state
  M400                                                      ; wait for buffer to clear
  G92 E0                                                    ; zero the extruder
  G1 E-4.0 F{ purge_speed * 60 }                            ; retract filament
  G91                                                       ; relative positioning
  _SAFE_MOVE_RELATIVE X=5 Y=5 Z=1 F=20000                   ; move nozzle to remove stringing
  _SAFE_MOVE_RELATIVE Z=10 F=600                            ; move nozzle up
  G90                                                       ; absolute positioning
  G0 X10 Y10 F3600                                          ; park nozzle at rear
  RESTORE_GCODE_STATE NAME=END_state
  TURN_OFF_HEATERS
  TURN_OFF_FANS
  BED_MESH_CLEAR
  {% if printer['gcode_macro _PRINT_VARIABLES'].cooldown | int %}
    FILTER_START SPEED=1.0                                    ; rebreather filter on full speed
    FILTER_STOP PURGE=1                                       ; rebreather filter delayed shutdown
  {% else %}
    M140 S{ printer['gcode_macro _PRINT_VARIABLES'].bed_temp | float }
  {% endif %}
  _PRINT_VARIABLES RESET=1                                  ; reset print variables
  #HOUR_COUNTER_STOP

[gcode_macro _PRINT_START_PREPARE]
gcode:
  SET_GCODE_OFFSET Z=0                                      ; reset Z offset
  M220 S100                                                 ; reset speed multiplier
  M221 S100                                                 ; reset flow multiplier
  TURN_OFF_FANS                                             ; turn off fans
  G21                                                       ; set units to millimeters
  G90                                                       ; use absolute coordinates
  M83                                                       ; use relative extrusion
  G92 E0.0                                                  ; reset extruder
  G32                                                       ; Z_TILT_ADJUST
  {% if printer['gcode_macro _PRINT_VARIABLES'].bed_mesh | int %}
    BED_MESH_CALIBRATE
  {% endif %}

[gcode_macro _PRINT_START_HEAT_BED]
gcode:
  {% set BED_TEMP = printer['gcode_macro _PRINT_VARIABLES'].bed_temp | float %}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                    ; set bed final temp
  FILTER_START                                                                  ; start rebreather filter
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP + 1}  ; wait for bed final temp

[gcode_macro _PRINT_START_HEAT_HOTEND]
gcode:
  {% set EXTRUDER_TEMP = printer['gcode_macro _PRINT_VARIABLES'].extruder_temp | float %}
  G1 X120 Y5 Z10 F1200
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}                           ; set extruder initial temp
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ EXTRUDER_TEMP } MAXIMUM={EXTRUDER_TEMP + 1}  ; wait for extruder final temp

[gcode_macro _FILAMENT_PRESSURE_ADVANCE]
gcode:
  {% set NOZZLE_SIZE = printer['gcode_macro _PRINT_VARIABLES'].nozzle_size | float %}
  {% set FILAMENT_TYPE = printer['gcode_macro _PRINT_VARIABLES'].filament_type | string %}

  # 0.5mm = Tungsten carbide - Bozzle
  {% set PA_VALUES = ({
    "ASA": { 0.5: 0.016 },
    "PA-CF": { 0.5: 0.016 },
    "PC": { 0.5: 0.022 },
    "PLA": { 0.5: 0.0175 },
    "PPS": { 0.5: 0.01 }
  }) %}

  {% if FILAMENT_TYPE in PA_VALUES %}
    { action_respond_info('Filament PA - filament type "%s" found in PA values.' % (FILAMENT_TYPE)) }
    {% if NOZZLE_SIZE in PA_VALUES[FILAMENT_TYPE] %}
      { action_respond_info('Filament PA - nozzle size "%s" found in PA values.' % (NOZZLE_SIZE)) }
      SET_PRESSURE_ADVANCE ADVANCE={ PA_VALUES[FILAMENT_TYPE][NOZZLE_SIZE] | float }
    {% else %}
      { action_respond_info('Filament PA - nozzle size "%s" not found in PA values!' % (NOZZLE_SIZE)) }
    {% endif %}
  {% else %}
    { action_respond_info('Filament PA - filament type "%s" not found in PA values!' % (FILAMENT_TYPE)) }
  {% endif %}
