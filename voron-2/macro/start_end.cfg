[gcode_macro _PRINT_VARIABLES]
variable_bed_temp: 0.0
variable_cooldown: 1
variable_extruder_temp: 0.0
variable_chamber_temp: 0.0
variable_filament_type: "NO-FILAMENT"
variable_nozzle_size: 0.0
gcode:
  {% set reset = params.RESET | default(0) | int %}
  {% if reset %}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=bed_temp VALUE=0.0
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=chamber_temp VALUE=0.0
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=cooldown VALUE=1
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=extruder_temp VALUE=0.0
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=filament_type VALUE='"NO-FILAMENT"'
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=nozzle_size VALUE=0.0
    SET_IDLE_TIMEOUT TIMEOUT={ printer.configfile.settings.idle_timeout.timeout | float }
  {% endif %}

[gcode_macro G32]
gcode:
  BED_MESH_CLEAR
  {% if "z" not in printer.toolhead.homed_axes %}               ; G28 Home if needed
    STATUS_HOMING
    M117 Homing
    G28
  {% endif %}
  M117 Leveling gantry
  STATUS_LEVELING
  QUAD_GANTRY_LEVEL                                             ; Level Gantry
  {% if printer['gcode_macro _PRINT_VARIABLES'].extruder_temp | float > 0.0 %}
  _PRINT_START_PREHEAT_FINAL
  {% endif %}
  M117 Calibrate Z offset
  G28 Z
  STATUS_CALIBRATING_Z
  CALIBRATE_Z
  G0 X150 Y150 Z30 F6000
  STATUS_READY

[gcode_macro PRINT_START]
description: Print start macro to be used by your slicer of choice
gcode:
  {% set BED_TEMP = params.BED_TEMP | default(100) | float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP | default(50) | float %}
  {% set COOLDOWN = params.COOLDOWN | default(1) | int %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(240) | float %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE | default("NO-FILAMENT") | string %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE | default(0.40) | float %}
  {% set PURGE_LINE = params.PURGE_LINE | default(1) | int %}
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=bed_temp VALUE='{BED_TEMP}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=chamber_temp VALUE='{CHAMBER_TEMP}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=cooldown VALUE='{COOLDOWN}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=extruder_temp VALUE='{EXTRUDER_TEMP}'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=filament_type VALUE='"{FILAMENT_TYPE}"'
  SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLES VARIABLE=nozzle_size VALUE='{NOZZLE_SIZE}'
  _CHECK_USER_VARIABLES
  SET_PIN PIN=daylight VALUE=0.30
  _PRINT_START_PREHEAT
  _PRINT_START_PREPARE
  _PRINT_START_PREHEAT_FINAL
  _CLEAN_NOZZLE
  {% if PURGE_LINE == 1 %}
  STATUS_CLEANING
  _PRINT_START_PURGE_LINE
  {% endif %}
  _FILAMENT_PRESSURE_ADVANCE
  M117 Printing [{FILAMENT_TYPE}]
  STATUS_BUSY

[gcode_macro PRINT_END]
description: Print end macro to be used by your slicer of choice
gcode:
  SAVE_GCODE_STATE NAME=END_state
  M400                                                      ; wait for buffer to clear
  G92 E0                                                    ; zero the extruder
  G1 E-4.0 F3600                                            ; retract filament
  _SAFE_MOVE_RELATIVE X=20 Y=20 Z=1 F=20000                 ; move nozzle to remove stringing
  _SAFE_MOVE_RELATIVE Z=10 F=600                            ; move nozzle away from the bed
  G90                                                       ; absolute positioning
  G0 X280 Y280 F3600                                        ; park nozzle at rear
  RESTORE_GCODE_STATE NAME=END_state
  UPDATE_DELAYED_GCODE ID=CHECK_HOTEND_FAN_RPM DURATION=0   ; stop monitoring hotend fan
  TURN_OFF_HEATERS
  M107                                                      ; turn off fan
  BED_MESH_CLEAR
  {% if printer['gcode_macro _PRINT_VARIABLES'].cooldown | int %}
    FILTER_START SPEED=1.0                                  ; nevermore filter on full speed
    FILTER_STOP PURGE=1                                     ; rebreather filter delayed shutdown
  {% else %}
    M140 S{ printer['gcode_macro _PRINT_VARIABLES'].bed_temp | float }
  {% endif %}
  _PRINT_VARIABLES RESET=1                                  ; reset print variables
  STATUS_READY

[gcode_macro _PRINT_START_PREHEAT]
gcode:
  {% set BED_TEMP = printer['gcode_macro _PRINT_VARIABLES'].bed_temp | float%}
  {% set EXTRUDER_TEMP_INITIAL = printer['gcode_macro _PRINT_VARIABLES'].extruder_temp | float - 40 %}
  STATUS_HEATING
  M106 S0                                                                                               ; turn off part cooling fan
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}                                            ; set bed final temp
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP + 1}                          ; wait for bed final temp
  FILTER_START                                                                                          ; start nevermore filter
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP_INITIAL}                                 ; set extruder initial temp
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP_INITIAL} MAXIMUM={EXTRUDER_TEMP_INITIAL + 1}  ; wait for extruder initial temp
  UPDATE_DELAYED_GCODE ID=CHECK_HOTEND_FAN_RPM DURATION=10                                              ; start monitoring hotend fan
  STATUS_READY

[gcode_macro _PRINT_START_PREHEAT_FINAL]
gcode:
  {% set EXTRUDER_TEMP = printer['gcode_macro _PRINT_VARIABLES'].extruder_temp | float %}
  STATUS_HEATING
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}                           ; set extruder initial temp
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ EXTRUDER_TEMP } MAXIMUM={EXTRUDER_TEMP + 1}  ; wait for extruder final temp
  STATUS_READY

[gcode_macro _PRINT_START_PREPARE]
gcode:
  SET_GCODE_OFFSET Z=0                                      ; reset Z offset - REQUIRED with flexplate macro
  G21                                                       ; set units to millimeters
  G90                                                       ; use absolute coordinates
  M83                                                       ; use relative distances
  G32                                                       ; level and clean

[gcode_macro _FILAMENT_PRESSURE_ADVANCE]
gcode:
  {% set NOZZLE_SIZE = printer['gcode_macro _PRINT_VARIABLES'].nozzle_size | float %}
  {% set FILAMENT_TYPE = printer['gcode_macro _PRINT_VARIABLES'].filament_type | string %}

  # 0.4 nozzle = SE Vanadium
  # 0.5 nozzle = Deez TC
  {% set PA_VALUES = ({
    "ABS": { 0.4: 0.045, 0.5: 0.030 },
    "ABS-X": { 0.4: 0.045, 0.5: 0.030 },
    "ASA": { 0.4: 0.045, 0.5: 0.030 },
    "PC": { 0.4: 0.060, 0.5: 0.0475 },
    "NYLON": { 0.4: 0.075 }
  }) %}

  {% if FILAMENT_TYPE in PA_VALUES %}
    { action_respond_info('Filament PA - filament type "%s" found in PA values.' % (FILAMENT_TYPE)) }
    {% if NOZZLE_SIZE in PA_VALUES[FILAMENT_TYPE] %}
      { action_respond_info('Filament PA - nozzle size "%s" found in PA values.' % (NOZZLE_SIZE)) }
      SET_PRESSURE_ADVANCE ADVANCE={ PA_VALUES[FILAMENT_TYPE][NOZZLE_SIZE] | float }
    {% else %}
      { action_respond_info('Filament PA - nozzle size "%s" not found in PA values!' % (NOZZLE_SIZE)) }
    {% endif %}
  {% else %}
    { action_respond_info('Filament PA - filament type "%s" not found in PA values!' % (FILAMENT_TYPE)) }
  {% endif %}

[gcode_macro _CLEAN_NOZZLE]
variable_start_x: 285
variable_start_y: 350
variable_start_z: 5.5
variable_wipe_dist: -50
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}